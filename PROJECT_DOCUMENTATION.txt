================================================================================
                    IoT DASHBOARD PROJECT - COMPREHENSIVE DOCUMENTATION
================================================================================

PROJECT OVERVIEW
================================================================================
This is a full-stack IoT Dashboard application built with React, TypeScript, and Supabase.
The system manages IoT devices, collects telemetry data, handles real-time updates,
manages alerts, and provides automation capabilities.

TECHNOLOGY STACK
================================================================================

Frontend:
- React 18.3.1 (JavaScript library for building user interfaces)
- TypeScript (Static type checking)
- Vite (Build tool and development server)
- Tailwind CSS (Utility-first CSS framework)
- Tailwind CSS Animate (Animation utilities)

UI Components:
- Radix UI (Headless UI components)
- Shadcn/UI (Pre-built styled components)
- Lucide React (Icon library)
- Recharts (Charts and data visualization)

State Management & Data:
- React Query (@tanstack/react-query) (Server state management)
- React Hook Form (Form handling)
- Zod (Schema validation)

Backend & Database:
- Supabase (Backend-as-a-Service)
  - PostgreSQL Database
  - Real-time subscriptions
  - Authentication
  - Row Level Security (RLS)
  - Edge Functions
  - Storage (configured but not used)

Routing:
- React Router DOM (Client-side routing)

Other Libraries:
- date-fns (Date manipulation)
- class-variance-authority (Component variant handling)
- clsx & tailwind-merge (Conditional class names)
- Sonner (Toast notifications)
- cmdk (Command palette)
- input-otp (OTP input component)
- next-themes (Dark/light theme management)

SUPABASE CONFIGURATION
================================================================================

Database URL: https://mrwanozupkjsdesqevzd.supabase.co
Project ID: mrwanozupkjsdesqevzd

Authentication:
- Email/Password authentication
- Session persistence in localStorage
- Auto token refresh enabled
- Row Level Security (RLS) for data access control

Real-time Features:
- WebSocket connections for live updates
- Real-time subscriptions to database changes
- Live telemetry data streaming
- Presence tracking capabilities

DATABASE SCHEMA
================================================================================

Tables:

1. DEVICES
   - id (UUID, Primary Key)
   - name (TEXT, Required)
   - type (TEXT, Required)
   - location (TEXT, Optional)
   - status (TEXT, Default: 'offline')
   - last_seen (TIMESTAMP)
   - configuration (JSONB, Default: {})
   - telemetry_data (JSONB, Default: {})
   - created_at (TIMESTAMP, Default: now())
   - updated_at (TIMESTAMP, Default: now())

2. TELEMETRY
   - id (UUID, Primary Key)
   - device_id (UUID, Required)
   - timestamp (TIMESTAMP, Default: now())
   - temperature (NUMERIC, Optional)
   - humidity (NUMERIC, Optional)
   - pressure (NUMERIC, Optional)
   - power (NUMERIC, Optional)
   - voltage (NUMERIC, Optional)
   - current (NUMERIC, Optional)
   - data (JSONB, Default: {})

3. ALERTS
   - id (UUID, Primary Key)
   - device_id (UUID, Optional)
   - type (TEXT, Required)
   - severity (TEXT, Default: 'medium')
   - message (TEXT, Required)
   - status (TEXT, Default: 'active')
   - acknowledged (BOOLEAN, Default: false)
   - acknowledged_by (UUID, Optional)
   - acknowledged_at (TIMESTAMP, Optional)
   - resolved_at (TIMESTAMP, Optional)
   - created_at (TIMESTAMP, Default: now())

4. AUTOMATION_WORKFLOWS
   - id (UUID, Primary Key)
   - user_id (UUID, Required)
   - name (TEXT, Required)
   - description (TEXT, Optional)
   - trigger_conditions (JSONB, Required)
   - actions (JSONB, Required)
   - enabled (BOOLEAN, Default: true)
   - created_at (TIMESTAMP, Default: now())
   - updated_at (TIMESTAMP, Default: now())

5. AUDIT_LOGS
   - id (UUID, Primary Key)
   - user_id (UUID, Required)
   - action (TEXT, Required)
   - resource_type (TEXT, Required)
   - resource_id (TEXT, Optional)
   - details (JSONB, Default: {})
   - ip_address (INET, Optional)
   - user_agent (TEXT, Optional)
   - created_at (TIMESTAMP, Default: now())

6. NOTIFICATION_SETTINGS
   - id (UUID, Primary Key)
   - user_id (UUID, Required)
   - email_notifications (BOOLEAN, Default: true)
   - sms_notifications (BOOLEAN, Default: false)
   - push_notifications (BOOLEAN, Default: true)
   - alert_types (JSONB, Default: ["critical", "warning"])
   - phone_number (TEXT, Optional)
   - created_at (TIMESTAMP, Default: now())
   - updated_at (TIMESTAMP, Default: now())

Row Level Security (RLS) Policies:
- All tables have RLS enabled
- Devices, alerts, and telemetry: Public read access, authenticated write access
- Automation workflows: User-specific access (users can only see their own)
- Audit logs: User-specific access (users can only see their own)
- Notification settings: User-specific access

Real-time Configuration:
- Tables enabled for real-time: devices, telemetry, alerts
- Uses REPLICA IDENTITY FULL for complete change tracking
- Added to supabase_realtime publication

AUTHENTICATION SYSTEM
================================================================================

Implementation:
- Custom authentication context (useAuth hook)
- Email/password authentication via Supabase Auth
- Session persistence in localStorage
- Auto token refresh
- Authentication state management with React context

Flow:
1. User signs up/signs in via AuthPage component
2. Supabase handles authentication and token management
3. Auth state is managed globally via AuthContext
4. Protected routes redirect to /auth if not authenticated
5. User session is maintained across browser refreshes

Components:
- AuthPage: Main authentication interface
- AuthProvider: Context provider for auth state
- useAuth: Custom hook for accessing auth state

REAL-TIME FEATURES
================================================================================

Implementation:
- RealtimeManager component handles all real-time subscriptions
- WebSocket connections to Supabase real-time API
- Subscriptions to database changes (INSERT, UPDATE, DELETE)
- Mock data generation for demonstration purposes

Real-time Subscriptions:
1. Telemetry data updates (live sensor readings)
2. Alert notifications (new alerts, status changes)
3. Device status changes (online/offline, configuration updates)

Mock Data Generation:
- Generates sample telemetry data when no real devices exist
- Creates temperature, humidity, pressure, power readings
- Simulates device alerts based on thresholds
- Updates every 5 seconds for demonstration

Protocols:
- WebSocket connections for real-time communication
- PostgreSQL LISTEN/NOTIFY for database change notifications
- JSON message format for real-time data exchange

COMPONENT ARCHITECTURE
================================================================================

Layout Components:
- AppHeader: Main navigation and user controls
- AppTabs: Tab navigation for different sections
- ThemeProvider: Dark/light theme management
- LoadingSpinner: Loading state indicator

Dashboard Components:
- DashboardOverview: Main dashboard view
- DashboardStats: Statistics and KPI cards
- TelemetryChart: Data visualization charts

Device Management:
- DeviceGrid: Grid layout for device cards
- DeviceManagement: Device CRUD operations
- AddDeviceModal: Form for adding new devices
- EditDeviceModal: Form for editing existing devices
- DeviceDetailsModal: Detailed device information

Automation System:
- AutomationHub: Main automation interface
- AutomationEngine: Rule processing engine
- Rule evaluation and execution system

Alert System:
- AlertsPanel: Alert management interface
- Real-time alert notifications
- Alert acknowledgment and resolution

Analytics:
- AdvancedAnalytics: Data analysis and reporting
- TelemetryChart: Time-series data visualization
- Statistical analysis of sensor data

Audit & Compliance:
- AuditLogViewer: System activity tracking
- Action logging for compliance
- User activity monitoring

AUTOMATION SYSTEM
================================================================================

Architecture:
- Rule-based automation engine
- Trigger conditions based on sensor data
- Action execution system
- Real-time rule evaluation

Rule Types:
1. Sensor-based triggers:
   - Temperature thresholds
   - Humidity levels
   - Pressure readings
   - Power consumption
   - Custom sensor data

2. Condition Types:
   - greater_than
   - less_than
   - equal_to
   - between (range conditions)

3. Action Types:
   - Alert generation
   - Device control commands
   - Notification sending
   - System state changes

Rule Processing:
- Continuous evaluation every 30 seconds
- Cooldown mechanism to prevent spam
- Rule enable/disable functionality
- Audit logging for rule executions

DATA FLOW
================================================================================

1. Device Registration:
   - Devices are added through the Device Management interface
   - Device configuration stored in PostgreSQL
   - Real-time updates broadcasted to all connected clients

2. Telemetry Collection:
   - Mock data generation simulates real IoT devices
   - Sensor readings stored in telemetry table
   - Real-time streaming to dashboard components
   - Historical data retention for analytics

3. Alert Generation:
   - Automation rules evaluate telemetry data
   - Threshold violations trigger alerts
   - Alerts stored in database with severity levels
   - Real-time notifications to users

4. User Interactions:
   - All user actions logged in audit_logs table
   - Real-time updates reflected across all connected clients
   - State management through React context and hooks

SECURITY FEATURES
================================================================================

Authentication:
- JWT-based authentication via Supabase Auth
- Secure password hashing
- Session management with auto-refresh
- Protected routes and API endpoints

Authorization:
- Row Level Security (RLS) policies
- User-specific data access control
- Role-based access control foundation
- API key management for external integrations

Data Protection:
- HTTPS encryption for all communications
- Secure WebSocket connections (WSS)
- Input validation and sanitization
- SQL injection prevention through parameterized queries

Audit Trail:
- Complete audit logging system
- User action tracking
- IP address and user agent logging
- Compliance reporting capabilities

FILE STRUCTURE
================================================================================

src/
├── components/
│   ├── alerts/
│   │   └── AlertsPanel.tsx
│   ├── analytics/
│   │   └── AdvancedAnalytics.tsx
│   ├── audit/
│   │   └── AuditLogViewer.tsx
│   ├── auth/
│   │   └── AuthPage.tsx
│   ├── automation/
│   │   ├── AutomationEngine.tsx
│   │   └── AutomationHub.tsx
│   ├── control/
│   │   └── ControlPanel.tsx
│   ├── dashboard/
│   │   ├── DashboardOverview.tsx
│   │   └── DashboardStats.tsx
│   ├── devices/
│   │   ├── AddDeviceModal.tsx
│   │   ├── DeviceDetailsModal.tsx
│   │   ├── DeviceGrid.tsx
│   │   ├── DeviceManagement.tsx
│   │   └── EditDeviceModal.tsx
│   ├── export/
│   │   └── ExportButton.tsx
│   ├── layout/
│   │   ├── AppHeader.tsx
│   │   ├── AppTabs.tsx
│   │   └── LoadingSpinner.tsx
│   ├── realtime/
│   │   └── RealtimeManager.tsx
│   ├── telemetry/
│   │   └── TelemetryChart.tsx
│   ├── theme/
│   │   ├── ThemeProvider.tsx
│   │   └── ThemeToggle.tsx
│   ├── ui/ (Shadcn UI components)
│   └── websocket/
│       └── WebSocketManager.tsx
├── hooks/
│   ├── useAuth.tsx
│   ├── useAppData.ts
│   ├── useAuditLog.ts
│   ├── use-mobile.tsx
│   └── use-toast.ts
├── integrations/
│   └── supabase/
│       ├── client.ts
│       └── types.ts
├── lib/
│   └── utils.ts
├── pages/
│   ├── Index.tsx
│   ├── AuthPage.tsx
│   └── NotFound.tsx
├── App.tsx
├── main.tsx
├── index.css
└── vite-env.d.ts

supabase/
├── functions/
│   ├── export-dashboard-data/
│   │   └── index.ts
│   ├── send-alert-notification/
│   │   └── index.ts
│   └── websocket-handler/
│       └── index.ts
├── migrations/
│   ├── 20250708151615-eeec4207-1dd0-469b-8209-45eb27349f38.sql
│   └── 20250709090226-b9a60371-47f1-404e-b852-635c600856a7.sql
└── config.toml

EDGE FUNCTIONS
================================================================================

1. export-dashboard-data:
   - Exports dashboard data to various formats
   - Handles data aggregation and formatting
   - Supports CSV, JSON, and PDF exports

2. send-alert-notification:
   - Sends alert notifications via email/SMS
   - Integrates with external notification services
   - Handles notification preferences and delivery

3. websocket-handler:
   - Manages WebSocket connections
   - Handles real-time message routing
   - Provides fallback for real-time features

DEVELOPMENT WORKFLOW
================================================================================

Local Development:
1. Clone repository
2. Install dependencies: npm install
3. Set up Supabase project
4. Configure environment variables
5. Run development server: npm run dev

Database Management:
1. Use Supabase dashboard for schema changes
2. Generate TypeScript types automatically
3. Apply migrations through Supabase CLI
4. Test RLS policies in development

Deployment:
1. Build optimized production bundle
2. Deploy to hosting platform (Vercel, Netlify, etc.)
3. Configure production environment variables
4. Set up monitoring and analytics

MONITORING & ANALYTICS
================================================================================

Performance Monitoring:
- Real-time dashboard performance metrics
- Database query performance tracking
- WebSocket connection monitoring
- Error tracking and logging

Business Analytics:
- Device usage statistics
- Alert frequency analysis
- User activity patterns
- System performance metrics

Health Checks:
- Database connection monitoring
- Real-time subscription health
- API endpoint availability
- Edge function performance

FUTURE ENHANCEMENTS
================================================================================

Planned Features:
1. Mobile responsive design improvements
2. Advanced analytics and reporting
3. Device firmware management
4. Multi-tenant support
5. API documentation and SDK
6. Advanced automation workflows
7. Machine learning for predictive analytics
8. Integration with external IoT platforms

Technical Improvements:
1. Performance optimizations
2. Enhanced security measures
3. Better error handling
4. Comprehensive testing suite
5. Documentation improvements
6. Accessibility enhancements

TROUBLESHOOTING
================================================================================

Common Issues:
1. Authentication failures - Check Supabase configuration
2. Real-time connection issues - Verify WebSocket support
3. Database connection errors - Check RLS policies
4. Performance issues - Monitor query performance
5. UI rendering problems - Check component state management

Debug Tools:
1. Browser Developer Tools
2. Supabase Dashboard logs
3. Real-time subscription monitoring
4. Database query analysis
5. Network request inspection

CONCLUSION
================================================================================

This IoT Dashboard project demonstrates a comprehensive full-stack application
built with modern web technologies. It showcases real-time data processing,
automated workflows, secure authentication, and scalable architecture using
Supabase as the backend infrastructure.

The system is designed for production use with proper security measures,
monitoring capabilities, and extensibility for future enhancements.

Last Updated: July 16, 2025
Version: 1.0.0